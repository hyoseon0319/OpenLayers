var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ValueTypes", function () {
  return ValueTypes;
});
_parcelHelpers.export(exports, "Operators", function () {
  return Operators;
});
_parcelHelpers.export(exports, "getValueType", function () {
  return getValueType;
});
_parcelHelpers.export(exports, "isTypeUnique", function () {
  return isTypeUnique;
});
_parcelHelpers.export(exports, "numberToGlsl", function () {
  return numberToGlsl;
});
_parcelHelpers.export(exports, "arrayToGlsl", function () {
  return arrayToGlsl;
});
_parcelHelpers.export(exports, "colorToGlsl", function () {
  return colorToGlsl;
});
_parcelHelpers.export(exports, "getStringNumberEquivalent", function () {
  return getStringNumberEquivalent;
});
_parcelHelpers.export(exports, "stringToGlsl", function () {
  return stringToGlsl;
});
_parcelHelpers.export(exports, "expressionToGlsl", function () {
  return expressionToGlsl;
});
var _colorJs = require('../color.js');
var ValueTypes = {
  NUMBER: 1,
  STRING: 2,
  COLOR: 4,
  BOOLEAN: 8,
  NUMBER_ARRAY: 16,
  ANY: 31,
  NONE: 0
};
var Operators = {};
function getValueType(value) {
  if (typeof value === 'number') {
    return ValueTypes.NUMBER;
  }
  if (typeof value === 'boolean') {
    return ValueTypes.BOOLEAN;
  }
  if (typeof value === 'string') {
    if (_colorJs.isStringColor(value)) {
      return ValueTypes.COLOR | ValueTypes.STRING;
    }
    return ValueTypes.STRING;
  }
  if (!Array.isArray(value)) {
    throw new Error("Unhandled value type: " + JSON.stringify(value));
  }
  var valueArr = /** @type {Array<*>}*/
  value;
  var onlyNumbers = valueArr.every(function (v) {
    return typeof v === 'number';
  });
  if (onlyNumbers) {
    if (valueArr.length === 3 || valueArr.length === 4) {
      return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;
    }
    return ValueTypes.NUMBER_ARRAY;
  }
  if (typeof valueArr[0] !== 'string') {
    throw new Error("Expected an expression operator but received: " + JSON.stringify(valueArr));
  }
  var operator = Operators[valueArr[0]];
  if (operator === undefined) {
    throw new Error("Unrecognized expression operator: " + JSON.stringify(valueArr));
  }
  return operator.getReturnType(valueArr.slice(1));
}
function isTypeUnique(valueType) {
  return Math.log2(valueType) % 1 === 0;
}
function numberToGlsl(v) {
  var s = v.toString();
  return s.indexOf('.') === -1 ? s + '.0' : s;
}
function arrayToGlsl(array) {
  if (array.length < 2 || array.length > 4) {
    throw new Error('`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.');
  }
  return "vec" + array.length + "(" + array.map(numberToGlsl).join(', ') + ")";
}
function colorToGlsl(color) {
  var array = _colorJs.asArray(color).slice();
  if (array.length < 4) {
    array.push(1);
  }
  return arrayToGlsl(array.map(function (c, i) {
    return i < 3 ? c / 255 : c;
  }));
}
function getStringNumberEquivalent(context, string) {
  if (context.stringLiteralsMap[string] === undefined) {
    context.stringLiteralsMap[string] = Object.keys(context.stringLiteralsMap).length;
  }
  return context.stringLiteralsMap[string];
}
function stringToGlsl(context, string) {
  return numberToGlsl(getStringNumberEquivalent(context, string));
}
function expressionToGlsl(context, value, typeHint) {
  // operator
  if (Array.isArray(value) && typeof value[0] === 'string') {
    var operator = Operators[value[0]];
    if (operator === undefined) {
      throw new Error("Unrecognized expression operator: " + JSON.stringify(value));
    }
    return operator.toGlsl(context, value.slice(1), typeHint);
  }
  var valueType = getValueType(value);
  if ((valueType & ValueTypes.NUMBER) > 0) {
    return numberToGlsl(/** @type {number}*/
    value);
  } else if ((valueType & ValueTypes.BOOLEAN) > 0) {
    return value.toString();
  } else if ((valueType & ValueTypes.STRING) > 0 && (typeHint === undefined || typeHint == ValueTypes.STRING)) {
    return stringToGlsl(context, value.toString());
  } else if ((valueType & ValueTypes.COLOR) > 0 && (typeHint === undefined || typeHint == ValueTypes.COLOR)) {
    return colorToGlsl(/** @type {number[]|string}*/
    value);
  } else if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {
    return arrayToGlsl(/** @type {number[]}*/
    value);
  }
}
function assertNumber(value) {
  if (!(getValueType(value) & ValueTypes.NUMBER)) {
    throw new Error("A numeric value was expected, got " + JSON.stringify(value) + " instead");
  }
}
function assertNumbers(values) {
  for (var i = 0; i < values.length; i++) {
    assertNumber(values[i]);
  }
}
function assertString(value) {
  if (!(getValueType(value) & ValueTypes.STRING)) {
    throw new Error("A string value was expected, got " + JSON.stringify(value) + " instead");
  }
}
function assertBoolean(value) {
  if (!(getValueType(value) & ValueTypes.BOOLEAN)) {
    throw new Error("A boolean value was expected, got " + JSON.stringify(value) + " instead");
  }
}
function assertArgsCount(args, count) {
  if (args.length !== count) {
    throw new Error("Exactly " + count + " arguments were expected, got " + args.length + " instead");
  }
}
function assertArgsMinCount(args, count) {
  if (args.length < count) {
    throw new Error("At least " + count + " arguments were expected, got " + args.length + " instead");
  }
}
function assertArgsMaxCount(args, count) {
  if (args.length > count) {
    throw new Error("At most " + count + " arguments were expected, got " + args.length + " instead");
  }
}
function assertArgsEven(args) {
  if (args.length % 2 !== 0) {
    throw new Error("An even amount of arguments was expected, got " + args + " instead");
  }
}
function assertArgsOdd(args) {
  if (args.length % 2 === 0) {
    throw new Error("An odd amount of arguments was expected, got " + args + " instead");
  }
}
function assertUniqueInferredType(args, types) {
  if (!isTypeUnique(types)) {
    throw new Error("Could not infer only one type from the following expression: " + JSON.stringify(args));
  }
}
Operators['get'] = {
  getReturnType: function (args) {
    return ValueTypes.ANY;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 1);
    assertString(args[0]);
    var value = args[0].toString();
    if (context.attributes.indexOf(value) === -1) {
      context.attributes.push(value);
    }
    var prefix = context.inFragmentShader ? 'v_' : 'a_';
    return prefix + value;
  }
};
Operators['var'] = {
  getReturnType: function (args) {
    return ValueTypes.ANY;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 1);
    assertString(args[0]);
    var value = args[0].toString();
    if (context.variables.indexOf(value) === -1) {
      context.variables.push(value);
    }
    return "u_" + value;
  }
};
Operators['time'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 0);
    return 'u_time';
  }
};
Operators['zoom'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 0);
    return 'u_zoom';
  }
};
Operators['resolution'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 0);
    return 'u_resolution';
  }
};
Operators['*'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " * " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['/'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " / " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['+'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " + " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['-'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " - " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['clamp'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 3);
    assertNumbers(args);
    var min = expressionToGlsl(context, args[1]);
    var max = expressionToGlsl(context, args[2]);
    return "clamp(" + expressionToGlsl(context, args[0]) + ", " + min + ", " + max + ")";
  }
};
Operators['%'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "mod(" + expressionToGlsl(context, args[0]) + ", " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['^'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "pow(" + expressionToGlsl(context, args[0]) + ", " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['>'] = {
  getReturnType: function (args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " > " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['>='] = {
  getReturnType: function (args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " >= " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['<'] = {
  getReturnType: function (args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " < " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators['<='] = {
  getReturnType: function (args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " <= " + expressionToGlsl(context, args[1]) + ")";
  }
};
function getEqualOperator(operator) {
  return {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      // find common type
      var type = ValueTypes.ANY;
      for (var i = 0; i < args.length; i++) {
        type = type & getValueType(args[i]);
      }
      if (type === 0) {
        throw new Error("All arguments should be of compatible type, got " + JSON.stringify(args) + " instead");
      }
      return "(" + expressionToGlsl(context, args[0], type) + " " + operator + " " + expressionToGlsl(context, args[1], type) + ")";
    }
  };
}
Operators['=='] = getEqualOperator('==');
Operators['!='] = getEqualOperator('!=');
Operators['!'] = {
  getReturnType: function (args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 1);
    assertBoolean(args[0]);
    return "(!" + expressionToGlsl(context, args[0]) + ")";
  }
};
function getDecisionOperator(operator) {
  return {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsMinCount(args, 2);
      for (var i = 0; i < args.length; i++) {
        assertBoolean(args[i]);
      }
      var result = '';
      result = args.map(function (arg) {
        return expressionToGlsl(context, arg);
      }).join(" " + operator + " ");
      result = "(" + result + ")";
      return result;
    }
  };
}
Operators['all'] = getDecisionOperator('&&');
Operators['any'] = getDecisionOperator('||');
Operators['between'] = {
  getReturnType: function (args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function (context, args) {
    assertArgsCount(args, 3);
    assertNumbers(args);
    var min = expressionToGlsl(context, args[1]);
    var max = expressionToGlsl(context, args[2]);
    var value = expressionToGlsl(context, args[0]);
    return "(" + value + " >= " + min + " && " + value + " <= " + max + ")";
  }
};
Operators['array'] = {
  getReturnType: function (args) {
    return ValueTypes.NUMBER_ARRAY;
  },
  toGlsl: function (context, args) {
    assertArgsMinCount(args, 2);
    assertArgsMaxCount(args, 4);
    assertNumbers(args);
    var parsedArgs = args.map(function (val) {
      return expressionToGlsl(context, val, ValueTypes.NUMBER);
    });
    return "vec" + args.length + "(" + parsedArgs.join(', ') + ")";
  }
};
Operators['color'] = {
  getReturnType: function (args) {
    return ValueTypes.COLOR;
  },
  toGlsl: function (context, args) {
    assertArgsMinCount(args, 3);
    assertArgsMaxCount(args, 4);
    assertNumbers(args);
    var array = /** @type {number[]}*/
    args;
    if (args.length === 3) {
      array.push(1);
    }
    var parsedArgs = args.map(function (val, i) {
      return expressionToGlsl(context, val, ValueTypes.NUMBER) + (i < 3 ? ' / 255.0' : '');
    });
    return "vec" + args.length + "(" + parsedArgs.join(', ') + ")";
  }
};
Operators['interpolate'] = {
  getReturnType: function (args) {
    var type = ValueTypes.COLOR | ValueTypes.NUMBER;
    for (var i = 3; i < args.length; i += 2) {
      type = type & getValueType(args[i]);
    }
    return type;
  },
  toGlsl: function (context, args, opt_typeHint) {
    assertArgsEven(args);
    assertArgsMinCount(args, 6);
    // validate interpolation type
    var type = args[0];
    var interpolation;
    switch (type[0]) {
      case 'linear':
        interpolation = 1;
        break;
      case 'exponential':
        interpolation = type[1];
        break;
      default:
        interpolation = null;
    }
    if (!interpolation) {
      throw new Error("Invalid interpolation type for \"interpolate\" operator, received: " + JSON.stringify(type));
    }
    // compute input/output types
    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;
    var outputType = Operators['interpolate'].getReturnType(args) & typeHint;
    assertUniqueInferredType(args, outputType);
    var input = expressionToGlsl(context, args[1]);
    var result = null;
    for (var i = 2; i < args.length - 2; i += 2) {
      var stop1 = expressionToGlsl(context, args[i]);
      var output1 = expressionToGlsl(context, args[i + 1], outputType);
      var stop2 = expressionToGlsl(context, args[i + 2]);
      var output2 = expressionToGlsl(context, args[i + 3], outputType);
      result = "mix(" + (result || output1) + ", " + output2 + ", pow(clamp((" + input + " - " + stop1 + ") / (" + stop2 + " - " + stop1 + "), 0.0, 1.0), " + numberToGlsl(interpolation) + "))";
    }
    return result;
  }
};
Operators['match'] = {
  getReturnType: function (args) {
    var type = ValueTypes.ANY;
    for (var i = 2; i < args.length; i += 2) {
      type = type & getValueType(args[i]);
    }
    type = type & getValueType(args[args.length - 1]);
    return type;
  },
  toGlsl: function (context, args, opt_typeHint) {
    assertArgsEven(args);
    assertArgsMinCount(args, 4);
    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;
    var outputType = Operators['match'].getReturnType(args) & typeHint;
    assertUniqueInferredType(args, outputType);
    var input = expressionToGlsl(context, args[0]);
    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);
    var result = null;
    for (var i = args.length - 3; i >= 1; i -= 2) {
      var match = expressionToGlsl(context, args[i]);
      var output = expressionToGlsl(context, args[i + 1], outputType);
      result = "(" + input + " == " + match + " ? " + output + " : " + (result || fallback) + ")";
    }
    return result;
  }
};
Operators['case'] = {
  getReturnType: function (args) {
    var type = ValueTypes.ANY;
    for (var i = 1; i < args.length; i += 2) {
      type = type & getValueType(args[i]);
    }
    type = type & getValueType(args[args.length - 1]);
    return type;
  },
  toGlsl: function (context, args, opt_typeHint) {
    assertArgsOdd(args);
    assertArgsMinCount(args, 3);
    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;
    var outputType = Operators['case'].getReturnType(args) & typeHint;
    assertUniqueInferredType(args, outputType);
    for (var i = 0; i < args.length - 1; i += 2) {
      assertBoolean(args[i]);
    }
    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);
    var result = null;
    for (var i = args.length - 3; i >= 0; i -= 2) {
      var condition = expressionToGlsl(context, args[i]);
      var output = expressionToGlsl(context, args[i + 1], outputType);
      result = "(" + condition + " ? " + output + " : " + (result || fallback) + ")";
    }
    return result;
  }
};
