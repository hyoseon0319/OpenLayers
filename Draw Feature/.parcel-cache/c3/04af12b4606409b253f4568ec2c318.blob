var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _FeatureJs = require('../Feature.js');
var _FeatureJsDefault = _parcelHelpers.interopDefault(_FeatureJs);
var _geomGeometryCollectionJs = require('../geom/GeometryCollection.js');
var _geomGeometryCollectionJsDefault = _parcelHelpers.interopDefault(_geomGeometryCollectionJs);
var _geomGeometryTypeJs = require('../geom/GeometryType.js');
var _geomGeometryTypeJsDefault = _parcelHelpers.interopDefault(_geomGeometryTypeJs);
var _JSONFeatureJs = require('./JSONFeature.js');
var _JSONFeatureJsDefault = _parcelHelpers.interopDefault(_JSONFeatureJs);
var _geomLineStringJs = require('../geom/LineString.js');
var _geomLineStringJsDefault = _parcelHelpers.interopDefault(_geomLineStringJs);
var _geomMultiLineStringJs = require('../geom/MultiLineString.js');
var _geomMultiLineStringJsDefault = _parcelHelpers.interopDefault(_geomMultiLineStringJs);
var _geomMultiPointJs = require('../geom/MultiPoint.js');
var _geomMultiPointJsDefault = _parcelHelpers.interopDefault(_geomMultiPointJs);
var _geomMultiPolygonJs = require('../geom/MultiPolygon.js');
var _geomMultiPolygonJsDefault = _parcelHelpers.interopDefault(_geomMultiPolygonJs);
var _geomPointJs = require('../geom/Point.js');
var _geomPointJsDefault = _parcelHelpers.interopDefault(_geomPointJs);
var _geomPolygonJs = require('../geom/Polygon.js');
var _geomPolygonJsDefault = _parcelHelpers.interopDefault(_geomPolygonJs);
var _assertsJs = require('../asserts.js');
var _objJs = require('../obj.js');
var _projJs = require('../proj.js');
var _FeatureJs2 = require('./Feature.js');
/**
* @module ol/format/GeoJSON
*/
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
/**
* @typedef {import("geojson").GeoJSON} GeoJSONObject
* @typedef {import("geojson").Feature} GeoJSONFeature
* @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
* @typedef {import("geojson").Geometry} GeoJSONGeometry
* @typedef {import("geojson").Point} GeoJSONPoint
* @typedef {import("geojson").LineString} GeoJSONLineString
* @typedef {import("geojson").Polygon} GeoJSONPolygon
* @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
* @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
* @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
* @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
*/
/**
* @typedef {Object} Options
* @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
* @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
* written by the format.  Options passed to read or write methods will take precedence.
* @property {string} [geometryName] Geometry name to use when creating features.
* @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
* the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
* will look for that field to set the geometry name. If both this field is set to `true`
* and a `geometryName` is provided, the `geometryName` will take precedence.
*/
/**
* @classdesc
* Feature format for reading and writing data in the GeoJSON format.
*
* @api
*/
var GeoJSON = /** @class*/
(function (_super) {
  __extends(GeoJSON, _super);
  /**
  * @param {Options=} opt_options Options.
  */
  function GeoJSON(opt_options) {
    var _this = this;
    var options = opt_options ? opt_options : {};
    _this = _super.call(this) || this;
    /**
    * @type {import("../proj/Projection.js").default}
    */
    _this.dataProjection = _projJs.get(options.dataProjection ? options.dataProjection : 'EPSG:4326');
    if (options.featureProjection) {
      _this.defaultFeatureProjection = _projJs.get(options.featureProjection);
    }
    /**
    * Name of the geometry attribute for features.
    * @type {string|undefined}
    * @private
    */
    _this.geometryName_ = options.geometryName;
    /**
    * Look for the geometry name in the feature GeoJSON
    * @type {boolean|undefined}
    * @private
    */
    _this.extractGeometryName_ = options.extractGeometryName;
    return _this;
  }
  /**
  * @param {Object} object Object.
  * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
  * @protected
  * @return {import("../Feature.js").default} Feature.
  */
  GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {
    /**
    * @type {GeoJSONFeature}
    */
    var geoJSONFeature = null;
    if (object['type'] === 'Feature') {
      geoJSONFeature = /** @type {GeoJSONFeature}*/
      object;
    } else {
      geoJSONFeature = {
        'type': 'Feature',
        'geometry': /** @type {GeoJSONGeometry}*/
        object,
        'properties': null
      };
    }
    var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);
    var feature = new _FeatureJsDefault.default();
    if (this.geometryName_) {
      feature.setGeometryName(this.geometryName_);
    } else if (this.extractGeometryName_ && ('geometry_name' in geoJSONFeature) !== undefined) {
      feature.setGeometryName(geoJSONFeature['geometry_name']);
    }
    feature.setGeometry(geometry);
    if (('id' in geoJSONFeature)) {
      feature.setId(geoJSONFeature['id']);
    }
    if (geoJSONFeature['properties']) {
      feature.setProperties(geoJSONFeature['properties'], true);
    }
    return feature;
  };
  /**
  * @param {Object} object Object.
  * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
  * @protected
  * @return {Array<Feature>} Features.
  */
  GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {
    var geoJSONObject = /** @type {GeoJSONObject}*/
    object;
    /** @type {Array<import("../Feature.js").default>}*/
    var features = null;
    if (geoJSONObject['type'] === 'FeatureCollection') {
      var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection}*/
      object;
      features = [];
      var geoJSONFeatures = geoJSONFeatureCollection['features'];
      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
      }
    } else {
      features = [this.readFeatureFromObject(object, opt_options)];
    }
    return features;
  };
  /**
  * @param {GeoJSONGeometry} object Object.
  * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
  * @protected
  * @return {import("../geom/Geometry.js").default} Geometry.
  */
  GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {
    return readGeometry(object, opt_options);
  };
  /**
  * @param {Object} object Object.
  * @protected
  * @return {import("../proj/Projection.js").default} Projection.
  */
  GeoJSON.prototype.readProjectionFromObject = function (object) {
    var crs = object['crs'];
    var projection;
    if (crs) {
      if (crs['type'] == 'name') {
        projection = _projJs.get(crs['properties']['name']);
      } else if (crs['type'] === 'EPSG') {
        projection = _projJs.get('EPSG:' + crs['properties']['code']);
      } else {
        _assertsJs.assert(false, 36);
      }
    } else {
      projection = this.dataProjection;
    }
    return (
      /** @type {import("../proj/Projection.js").default}*/
      projection
    );
  };
  /**
  * Encode a feature as a GeoJSON Feature object.
  *
  * @param {import("../Feature.js").default} feature Feature.
  * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
  * @return {GeoJSONFeature} Object.
  * @api
  */
  GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {
    opt_options = this.adaptOptions(opt_options);
    /** @type {GeoJSONFeature}*/
    var object = {
      'type': 'Feature',
      geometry: null,
      properties: null
    };
    var id = feature.getId();
    if (id !== undefined) {
      object.id = id;
    }
    if (!feature.hasProperties()) {
      return object;
    }
    var properties = feature.getProperties();
    var geometry = feature.getGeometry();
    if (geometry) {
      object.geometry = writeGeometry(geometry, opt_options);
      delete properties[feature.getGeometryName()];
    }
    if (!_objJs.isEmpty(properties)) {
      object.properties = properties;
    }
    return object;
  };
  /**
  * Encode an array of features as a GeoJSON object.
  *
  * @param {Array<import("../Feature.js").default>} features Features.
  * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
  * @return {GeoJSONFeatureCollection} GeoJSON Object.
  * @api
  */
  GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {
    opt_options = this.adaptOptions(opt_options);
    var objects = [];
    for (var i = 0, ii = features.length; i < ii; ++i) {
      objects.push(this.writeFeatureObject(features[i], opt_options));
    }
    return {
      type: 'FeatureCollection',
      features: objects
    };
  };
  /**
  * Encode a geometry as a GeoJSON object.
  *
  * @param {import("../geom/Geometry.js").default} geometry Geometry.
  * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
  * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
  * @api
  */
  GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {
    return writeGeometry(geometry, this.adaptOptions(opt_options));
  };
  return GeoJSON;
})(_JSONFeatureJsDefault.default);
/**
* @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
* @param {import("./Feature.js").ReadOptions=} opt_options Read options.
* @return {import("../geom/Geometry.js").default} Geometry.
*/
function readGeometry(object, opt_options) {
  if (!object) {
    return null;
  }
  /**
  * @type {import("../geom/Geometry.js").default}
  */
  var geometry;
  switch (object['type']) {
    case _geomGeometryTypeJsDefault.default.POINT:
      {
        geometry = readPointGeometry(/** @type {GeoJSONPoint}*/
        object);
        break;
      }
    case _geomGeometryTypeJsDefault.default.LINE_STRING:
      {
        geometry = readLineStringGeometry(/** @type {GeoJSONLineString}*/
        object);
        break;
      }
    case _geomGeometryTypeJsDefault.default.POLYGON:
      {
        geometry = readPolygonGeometry(/** @type {GeoJSONPolygon}*/
        object);
        break;
      }
    case _geomGeometryTypeJsDefault.default.MULTI_POINT:
      {
        geometry = readMultiPointGeometry(/** @type {GeoJSONMultiPoint}*/
        object);
        break;
      }
    case _geomGeometryTypeJsDefault.default.MULTI_LINE_STRING:
      {
        geometry = readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString}*/
        object);
        break;
      }
    case _geomGeometryTypeJsDefault.default.MULTI_POLYGON:
      {
        geometry = readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon}*/
        object);
        break;
      }
    case _geomGeometryTypeJsDefault.default.GEOMETRY_COLLECTION:
      {
        geometry = readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection}*/
        object);
        break;
      }
    default:
      {
        throw new Error('Unsupported GeoJSON type: ' + object.type);
      }
  }
  return _FeatureJs2.transformGeometryWithOptions(geometry, false, opt_options);
}
/**
* @param {GeoJSONGeometryCollection} object Object.
* @param {import("./Feature.js").ReadOptions=} opt_options Read options.
* @return {GeometryCollection} Geometry collection.
*/
function readGeometryCollectionGeometry(object, opt_options) {
  var geometries = object['geometries'].map(/**
  * @param {GeoJSONGeometry} geometry Geometry.
  * @return {import("../geom/Geometry.js").default} geometry Geometry.
  */
  function (geometry) {
    return readGeometry(geometry, opt_options);
  });
  return new _geomGeometryCollectionJsDefault.default(geometries);
}
/**
* @param {GeoJSONPoint} object Object.
* @return {Point} Point.
*/
function readPointGeometry(object) {
  return new _geomPointJsDefault.default(object['coordinates']);
}
/**
* @param {GeoJSONLineString} object Object.
* @return {LineString} LineString.
*/
function readLineStringGeometry(object) {
  return new _geomLineStringJsDefault.default(object['coordinates']);
}
/**
* @param {GeoJSONMultiLineString} object Object.
* @return {MultiLineString} MultiLineString.
*/
function readMultiLineStringGeometry(object) {
  return new _geomMultiLineStringJsDefault.default(object['coordinates']);
}
/**
* @param {GeoJSONMultiPoint} object Object.
* @return {MultiPoint} MultiPoint.
*/
function readMultiPointGeometry(object) {
  return new _geomMultiPointJsDefault.default(object['coordinates']);
}
/**
* @param {GeoJSONMultiPolygon} object Object.
* @return {MultiPolygon} MultiPolygon.
*/
function readMultiPolygonGeometry(object) {
  return new _geomMultiPolygonJsDefault.default(object['coordinates']);
}
/**
* @param {GeoJSONPolygon} object Object.
* @return {Polygon} Polygon.
*/
function readPolygonGeometry(object) {
  return new _geomPolygonJsDefault.default(object['coordinates']);
}
/**
* @param {import("../geom/Geometry.js").default} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometry} GeoJSON geometry.
*/
function writeGeometry(geometry, opt_options) {
  geometry = _FeatureJs2.transformGeometryWithOptions(geometry, true, opt_options);
  var type = geometry.getType();
  /** @type {GeoJSONGeometry}*/
  var geoJSON;
  switch (type) {
    case _geomGeometryTypeJsDefault.default.POINT:
      {
        geoJSON = writePointGeometry(/** @type {Point}*/
        geometry, opt_options);
        break;
      }
    case _geomGeometryTypeJsDefault.default.LINE_STRING:
      {
        geoJSON = writeLineStringGeometry(/** @type {LineString}*/
        geometry, opt_options);
        break;
      }
    case _geomGeometryTypeJsDefault.default.POLYGON:
      {
        geoJSON = writePolygonGeometry(/** @type {Polygon}*/
        geometry, opt_options);
        break;
      }
    case _geomGeometryTypeJsDefault.default.MULTI_POINT:
      {
        geoJSON = writeMultiPointGeometry(/** @type {MultiPoint}*/
        geometry, opt_options);
        break;
      }
    case _geomGeometryTypeJsDefault.default.MULTI_LINE_STRING:
      {
        geoJSON = writeMultiLineStringGeometry(/** @type {MultiLineString}*/
        geometry, opt_options);
        break;
      }
    case _geomGeometryTypeJsDefault.default.MULTI_POLYGON:
      {
        geoJSON = writeMultiPolygonGeometry(/** @type {MultiPolygon}*/
        geometry, opt_options);
        break;
      }
    case _geomGeometryTypeJsDefault.default.GEOMETRY_COLLECTION:
      {
        geoJSON = writeGeometryCollectionGeometry(/** @type {GeometryCollection}*/
        geometry, opt_options);
        break;
      }
    case _geomGeometryTypeJsDefault.default.CIRCLE:
      {
        geoJSON = {
          type: 'GeometryCollection',
          geometries: []
        };
        break;
      }
    default:
      {
        throw new Error('Unsupported geometry type: ' + type);
      }
  }
  return geoJSON;
}
/**
* @param {GeometryCollection} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
*/
function writeGeometryCollectionGeometry(geometry, opt_options) {
  var geometries = geometry.getGeometriesArray().map(function (geometry) {
    var options = _objJs.assign({}, opt_options);
    delete options.featureProjection;
    return writeGeometry(geometry, options);
  });
  return {
    type: 'GeometryCollection',
    geometries: geometries
  };
}
/**
* @param {LineString} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometry} GeoJSON geometry.
*/
function writeLineStringGeometry(geometry, opt_options) {
  return {
    type: 'LineString',
    coordinates: geometry.getCoordinates()
  };
}
/**
* @param {MultiLineString} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometry} GeoJSON geometry.
*/
function writeMultiLineStringGeometry(geometry, opt_options) {
  return {
    type: 'MultiLineString',
    coordinates: geometry.getCoordinates()
  };
}
/**
* @param {MultiPoint} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometry} GeoJSON geometry.
*/
function writeMultiPointGeometry(geometry, opt_options) {
  return {
    type: 'MultiPoint',
    coordinates: geometry.getCoordinates()
  };
}
/**
* @param {MultiPolygon} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometry} GeoJSON geometry.
*/
function writeMultiPolygonGeometry(geometry, opt_options) {
  var right;
  if (opt_options) {
    right = opt_options.rightHanded;
  }
  return {
    type: 'MultiPolygon',
    coordinates: geometry.getCoordinates(right)
  };
}
/**
* @param {Point} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometry} GeoJSON geometry.
*/
function writePointGeometry(geometry, opt_options) {
  return {
    type: 'Point',
    coordinates: geometry.getCoordinates()
  };
}
/**
* @param {Polygon} geometry Geometry.
* @param {import("./Feature.js").WriteOptions=} opt_options Write options.
* @return {GeoJSONGeometry} GeoJSON geometry.
*/
function writePolygonGeometry(geometry, opt_options) {
  var right;
  if (opt_options) {
    right = opt_options.rightHanded;
  }
  return {
    type: 'Polygon',
    coordinates: geometry.getCoordinates(right)
  };
}
exports.default = GeoJSON;
