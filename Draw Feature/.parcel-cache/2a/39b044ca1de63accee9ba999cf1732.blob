var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ImageSourceEventType", function () {
  return ImageSourceEventType;
});
_parcelHelpers.export(exports, "defaultImageLoadFunction", function () {
  return defaultImageLoadFunction;
});
_parcelHelpers.export(exports, "ImageSourceEvent", function () {
  return ImageSourceEvent;
});
var _eventsEventJs = require('../events/Event.js');
var _eventsEventJsDefault = _parcelHelpers.interopDefault(_eventsEventJs);
var _ImageStateJs = require('../ImageState.js');
var _ImageStateJsDefault = _parcelHelpers.interopDefault(_ImageStateJs);
var _reprojImageJs = require('../reproj/Image.js');
var _reprojImageJsDefault = _parcelHelpers.interopDefault(_reprojImageJs);
var _SourceJs = require('./Source.js');
var _SourceJsDefault = _parcelHelpers.interopDefault(_SourceJs);
var _reprojCommonJs = require('../reproj/common.js');
var _commonJs = require('./common.js');
var _utilJs = require('../util.js');
var _extentJs = require('../extent.js');
var _projJs = require('../proj.js');
var _arrayJs = require('../array.js');
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
var ImageSourceEventType = {
  /**
  * Triggered when an image starts loading.
  * @event module:ol/source/Image.ImageSourceEvent#imageloadstart
  * @api
  */
  IMAGELOADSTART: 'imageloadstart',
  /**
  * Triggered when an image finishes loading.
  * @event module:ol/source/Image.ImageSourceEvent#imageloadend
  * @api
  */
  IMAGELOADEND: 'imageloadend',
  /**
  * Triggered if image loading results in an error.
  * @event module:ol/source/Image.ImageSourceEvent#imageloaderror
  * @api
  */
  IMAGELOADERROR: 'imageloaderror'
};
/**
* @classdesc
* Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this
* type.
*/
var ImageSourceEvent = /** @class*/
(function (_super) {
  __extends(ImageSourceEvent, _super);
  /**
  * @param {string} type Type.
  * @param {import("../Image.js").default} image The image.
  */
  function ImageSourceEvent(type, image) {
    var _this = _super.call(this, type) || this;
    /**
    * The image related to the event.
    * @type {import("../Image.js").default}
    * @api
    */
    _this.image = image;
    return _this;
  }
  return ImageSourceEvent;
})(_eventsEventJsDefault.default);
/**
* @typedef {Object} Options
* @property {import("./Source.js").AttributionLike} [attributions]
* @property {boolean} [imageSmoothing=true] Enable image smoothing.
* @property {import("../proj.js").ProjectionLike} [projection]
* @property {Array<number>} [resolutions]
* @property {import("./State.js").default} [state]
*/
/**
* @classdesc
* Abstract base class; normally only used for creating subclasses and not
* instantiated in apps.
* Base class for sources providing a single image.
* @abstract
* @fires module:ol/source/Image.ImageSourceEvent
* @api
*/
var ImageSource = /** @class*/
(function (_super) {
  __extends(ImageSource, _super);
  /**
  * @param {Options} options Single image source options.
  */
  function ImageSource(options) {
    var _this = _super.call(this, {
      attributions: options.attributions,
      projection: options.projection,
      state: options.state
    }) || this;
    /**
    * @private
    * @type {Array<number>}
    */
    _this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;
    /**
    * @private
    * @type {import("../reproj/Image.js").default}
    */
    _this.reprojectedImage_ = null;
    /**
    * @private
    * @type {number}
    */
    _this.reprojectedRevision_ = 0;
    /**
    * @private
    * @type {object|undefined}
    */
    _this.contextOptions_ = options.imageSmoothing === false ? _commonJs.IMAGE_SMOOTHING_DISABLED : undefined;
    return _this;
  }
  /**
  * @return {Array<number>} Resolutions.
  */
  ImageSource.prototype.getResolutions = function () {
    return this.resolutions_;
  };
  /**
  * @return {Object|undefined} Context options.
  */
  ImageSource.prototype.getContextOptions = function () {
    return this.contextOptions_;
  };
  /**
  * @protected
  * @param {number} resolution Resolution.
  * @return {number} Resolution.
  */
  ImageSource.prototype.findNearestResolution = function (resolution) {
    if (this.resolutions_) {
      var idx = _arrayJs.linearFindNearest(this.resolutions_, resolution, 0);
      resolution = this.resolutions_[idx];
    }
    return resolution;
  };
  /**
  * @param {import("../extent.js").Extent} extent Extent.
  * @param {number} resolution Resolution.
  * @param {number} pixelRatio Pixel ratio.
  * @param {import("../proj/Projection.js").default} projection Projection.
  * @return {import("../ImageBase.js").default} Single image.
  */
  ImageSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {
    var sourceProjection = this.getProjection();
    if (!_reprojCommonJs.ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || _projJs.equivalent(sourceProjection, projection)) {
      if (sourceProjection) {
        projection = sourceProjection;
      }
      return this.getImageInternal(extent, resolution, pixelRatio, projection);
    } else {
      if (this.reprojectedImage_) {
        if (this.reprojectedRevision_ == this.getRevision() && _projJs.equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && _extentJs.equals(this.reprojectedImage_.getExtent(), extent)) {
          return this.reprojectedImage_;
        }
        this.reprojectedImage_.dispose();
        this.reprojectedImage_ = null;
      }
      this.reprojectedImage_ = new _reprojImageJsDefault.default(sourceProjection, projection, extent, resolution, pixelRatio, (function (extent, resolution, pixelRatio) {
        return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);
      }).bind(this), this.contextOptions_);
      this.reprojectedRevision_ = this.getRevision();
      return this.reprojectedImage_;
    }
  };
  /**
  * @abstract
  * @param {import("../extent.js").Extent} extent Extent.
  * @param {number} resolution Resolution.
  * @param {number} pixelRatio Pixel ratio.
  * @param {import("../proj/Projection.js").default} projection Projection.
  * @return {import("../ImageBase.js").default} Single image.
  * @protected
  */
  ImageSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {
    return _utilJs.abstract();
  };
  /**
  * Handle image change events.
  * @param {import("../events/Event.js").default} event Event.
  * @protected
  */
  ImageSource.prototype.handleImageChange = function (event) {
    var image = /** @type {import("../Image.js").default}*/
    event.target;
    switch (image.getState()) {
      case _ImageStateJsDefault.default.LOADING:
        this.loading = true;
        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));
        break;
      case _ImageStateJsDefault.default.LOADED:
        this.loading = false;
        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));
        break;
      case _ImageStateJsDefault.default.ERROR:
        this.loading = false;
        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));
        break;
      default:
    }
  };
  return ImageSource;
})(_SourceJsDefault.default);
function defaultImageLoadFunction(image, src) {
  /** @type {HTMLImageElement|HTMLVideoElement}*/
  image.getImage().src = src;
}
exports.default = ImageSource;
