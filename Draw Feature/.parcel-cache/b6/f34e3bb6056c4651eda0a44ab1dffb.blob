var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "applyStyle", function () {
  return applyStyle;
});
_parcelHelpers.export(exports, "applyBackground", function () {
  return applyBackground;
});
_parcelHelpers.export(exports, "apply", function () {
  return apply;
});
_parcelHelpers.export(exports, "getLayer", function () {
  return getLayer;
});
_parcelHelpers.export(exports, "getLayers", function () {
  return getLayers;
});
_parcelHelpers.export(exports, "getSource", function () {
  return getSource;
});
_parcelHelpers.export(exports, "_finalizeLayer", function () {
  return finalizeLayer;
});
_parcelHelpers.export(exports, "_getFonts", function () {
  return getFonts;
});
var _mapboxToCssFont = require('mapbox-to-css-font');
var _mapboxToCssFontDefault = _parcelHelpers.interopDefault(_mapboxToCssFont);
var _stylefunction = require('./stylefunction');
var _stylefunctionDefault = _parcelHelpers.interopDefault(_stylefunction);
var _webfontMatcherLibFontsGoogle = require('webfont-matcher/lib/fonts/google');
var _webfontMatcherLibFontsGoogleDefault = _parcelHelpers.interopDefault(_webfontMatcherLibFontsGoogle);
var _olProj = require('ol/proj');
var _olTilegrid = require('ol/tilegrid');
var _olTilegridTileGrid = require('ol/tilegrid/TileGrid');
var _olTilegridTileGridDefault = _parcelHelpers.interopDefault(_olTilegridTileGrid);
var _olMap = require('ol/Map');
var _olMapDefault = _parcelHelpers.interopDefault(_olMap);
var _olView = require('ol/View');
var _olViewDefault = _parcelHelpers.interopDefault(_olView);
var _olFormatGeoJSON = require('ol/format/GeoJSON');
var _olFormatGeoJSONDefault = _parcelHelpers.interopDefault(_olFormatGeoJSON);
var _olFormatMVT = require('ol/format/MVT');
var _olFormatMVTDefault = _parcelHelpers.interopDefault(_olFormatMVT);
var _olObservable = require('ol/Observable');
var _olLayerTile = require('ol/layer/Tile');
var _olLayerTileDefault = _parcelHelpers.interopDefault(_olLayerTile);
var _olLayerVector = require('ol/layer/Vector');
var _olLayerVectorDefault = _parcelHelpers.interopDefault(_olLayerVector);
var _olLayerVectorTile = require('ol/layer/VectorTile');
var _olLayerVectorTileDefault = _parcelHelpers.interopDefault(_olLayerVectorTile);
var _olSourceTileJSON = require('ol/source/TileJSON');
var _olSourceTileJSONDefault = _parcelHelpers.interopDefault(_olSourceTileJSON);
var _olSourceVector = require('ol/source/Vector');
var _olSourceVectorDefault = _parcelHelpers.interopDefault(_olSourceVector);
var _olSourceVectorTile = require('ol/source/VectorTile');
var _olSourceVectorTileDefault = _parcelHelpers.interopDefault(_olSourceVectorTile);
var _mapboxMapboxGlStyleSpec = require('@mapbox/mapbox-gl-style-spec');
var _util = require('./util');
/**
* @typedef {import("ol/Map").default} PluggableMap
* @typedef {import("ol/layer/Layer").default} Layer
* @typedef {import("ol/source/Source").default} Source
* @private
*/
var tilejsonCache = {};
var fontFamilyRegEx = /font-family: ?([^;]*);/;
var stripQuotesRegEx = /("|')/g;
var loadedFontFamilies;
function hasFontFamily(family) {
  if (!loadedFontFamilies) {
    loadedFontFamilies = {};
    var styleSheets = document.styleSheets;
    for (var i = 0, ii = styleSheets.length; i < ii; ++i) {
      var styleSheet = /** @type {CSSStyleSheet}*/
      styleSheets[i];
      try {
        var cssRules = styleSheet.rules || styleSheet.cssRules;
        if (cssRules) {
          for (var j = 0, jj = cssRules.length; j < jj; ++j) {
            var cssRule = cssRules[j];
            if (cssRule.type == 5) {
              var match = cssRule.cssText.match(fontFamilyRegEx);
              loadedFontFamilies[match[1].replace(stripQuotesRegEx, '')] = true;
            }
          }
        }
      } catch (e) {}
    }
  }
  return (family in loadedFontFamilies);
}
var processedFontFamilies = {};
var googleFamilies = _webfontMatcherLibFontsGoogleDefault.default.getNames();
/**
* @private
* @param {Array} fonts Fonts.
* @return {Array} Processed fonts.
*/
function getFonts(fonts) {
  var fontsKey = fonts.toString();
  if ((fontsKey in processedFontFamilies)) {
    return fonts;
  }
  var googleFontDescriptions = fonts.map(function (font) {
    var parts = _mapboxToCssFontDefault.default(font, 1).split(' ');
    return [parts.slice(3).join(' ').replace(/"/g, ''), parts[1] + parts[0]];
  });
  for (var i = 0, ii = googleFontDescriptions.length; i < ii; ++i) {
    var googleFontDescription = googleFontDescriptions[i];
    var family = googleFontDescription[0];
    if (!hasFontFamily(family) && googleFamilies.indexOf(family) !== -1) {
      var fontUrl = 'https://fonts.googleapis.com/css?family=' + family.replace(/ /g, '+') + ':' + googleFontDescription[1];
      if (!document.querySelector('link[href="' + fontUrl + '"]')) {
        var markup = document.createElement('link');
        markup.href = fontUrl;
        markup.rel = 'stylesheet';
        document.head.appendChild(markup);
      }
    }
  }
  processedFontFamilies[fontsKey] = true;
  return fonts;
}
var spriteRegEx = /^(.*)(\?.*)$/;
function withPath(url, path) {
  if (path && url.indexOf('.') === 0) {
    url = path + url;
  }
  return url;
}
function toSpriteUrl(url, path, extension) {
  url = withPath(url, path);
  var parts = url.match(spriteRegEx);
  return parts ? parts[1] + extension + (parts.length > 2 ? parts[2] : '') : url + extension;
}
function applyStyle(layer, glStyle, source, path, resolutions) {
  return new Promise(function (resolve, reject) {
    // TODO: figure out where best place to check source type is
    // Note that the source arg is an array of gl layer ids and each must be
    // dereferenced to get source type to validate
    if (typeof glStyle != 'object') {
      glStyle = JSON.parse(glStyle);
    }
    if (glStyle.version != 8) {
      return reject(new Error('glStyle version 8 required.'));
    }
    if (!(layer instanceof _olLayerVectorDefault.default || layer instanceof _olLayerVectorTileDefault.default)) {
      return reject(new Error('Can only apply to VectorLayer or VectorTileLayer'));
    }
    var spriteScale, spriteData, spriteImageUrl, style;
    function onChange() {
      if (!style && (!glStyle.sprite || spriteData)) {
        style = _stylefunctionDefault.default(layer, glStyle, source, resolutions, spriteData, spriteImageUrl, getFonts);
        if (!layer.getStyle()) {
          reject(new Error("Nothing to show for source [" + source + "]"));
        } else {
          resolve();
        }
      } else if (style) {
        layer.setStyle(style);
        resolve();
      } else {
        reject(new Error('Something went wrong trying to apply style.'));
      }
    }
    if (glStyle.sprite) {
      spriteScale = window.devicePixelRatio >= 1.5 ? 0.5 : 1;
      var sizeFactor_1 = spriteScale == 0.5 ? '@2x' : '';
      var spriteUrl_1 = toSpriteUrl(glStyle.sprite, path, sizeFactor_1 + '.json');
      fetch(spriteUrl_1, {
        credentials: 'same-origin'
      }).then(function (response) {
        if (!response.ok && sizeFactor_1 !== '') {
          spriteUrl_1 = toSpriteUrl(glStyle.sprite, path, '.json');
          return fetch(spriteUrl_1, {
            credentials: 'same-origin'
          });
        } else {
          return response;
        }
      }).then(function (response) {
        if (response.ok) {
          return response.json();
        } else {
          reject(new Error("Problem fetching sprite from " + spriteUrl_1 + ": " + response.statusText));
        }
      }).then(function (spritesJson) {
        if (spritesJson === undefined) {
          return reject(new Error('No sprites found.'));
        }
        spriteData = spritesJson;
        spriteImageUrl = toSpriteUrl(glStyle.sprite, path, sizeFactor_1 + '.png');
        onChange();
      }).catch(function (err) {
        reject(new Error("Sprites cannot be loaded: " + spriteUrl_1 + ": " + err.message));
      });
    } else {
      onChange();
    }
  });
}
var emptyObj = {};
function setBackground(map, layer) {
  var background = {
    type: layer.type
  };
  function updateStyle() {
    var element = map.getTargetElement();
    if (!element) {
      return;
    }
    var layout = layer.layout || ({});
    var paint = layer.paint || ({});
    background['paint'] = paint;
    background.id = 'olms-bg-' + paint['background-opacity'] + paint['background-color'];
    var zoom = map.getView().getZoom();
    if (paint['background-color'] !== undefined) {
      var bg = _stylefunction.getValue(background, 'paint', 'background-color', zoom, emptyObj);
      element.style.background = _mapboxMapboxGlStyleSpec.Color.parse(bg).toString();
    }
    if (paint['background-opacity'] !== undefined) {
      element.style.opacity = _stylefunction.getValue(background, 'paint', 'background-opacity', zoom, emptyObj);
    }
    if (layout.visibility == 'none') {
      element.style.backgroundColor = '';
      element.style.opacity = '';
    }
  }
  if (map.getTargetElement()) {
    updateStyle();
  }
  map.on(['change:resolution', 'change:target'], updateStyle);
}
function applyBackground(map, glStyle) {
  glStyle.layers.some(function (l) {
    if (l.type == 'background') {
      setBackground(map, l);
      return true;
    }
  });
}
function getSourceIdByRef(layers, ref) {
  var sourceId;
  layers.some(function (layer) {
    if (layer.id == ref) {
      sourceId = layer.source;
      return true;
    }
  });
  return sourceId;
}
function extentFromTileJSON(tileJSON) {
  var bounds = tileJSON.bounds;
  if (bounds) {
    var ll = _olProj.fromLonLat([bounds[0], bounds[1]]);
    var tr = _olProj.fromLonLat([bounds[2], bounds[3]]);
    return [ll[0], ll[1], tr[0], tr[1]];
  }
}
function setupVectorLayer(glSource, accessToken, url) {
  glSource = _util.assign({}, glSource);
  var layer = new _olLayerVectorTileDefault.default({
    declutter: true,
    visible: false
  });
  var cacheKey = JSON.stringify(glSource);
  var tilejson = tilejsonCache[cacheKey];
  if (!tilejson) {
    tilejson = tilejsonCache[cacheKey] = new _olSourceTileJSONDefault.default({
      url: glSource.tiles ? undefined : url,
      tileJSON: glSource.tiles ? glSource : undefined
    });
  }
  var key = tilejson.on('change', function () {
    var state = tilejson.getState();
    if (state === 'ready') {
      var tileJSONDoc = tilejson.getTileJSON();
      var tiles = Array.isArray(tileJSONDoc.tiles) ? tileJSONDoc.tiles : [tileJSONDoc.tiles];
      if (url) {
        for (var i = 0, ii = tiles.length; i < ii; ++i) {
          var tile = tiles[i];
          if (tile.indexOf('http') != 0) {
            tiles[i] = url.replace(/\/?$/, '/') + tile.replace(/^\//, '');
          }
        }
      }
      var tileGrid = tilejson.getTileGrid();
      var extent = extentFromTileJSON(tileJSONDoc);
      var minZoom = tileJSONDoc.minzoom || 0;
      var maxZoom = tileJSONDoc.maxzoom || 22;
      var source = tilejson.get('ol-source');
      if (source === undefined) {
        source = new _olSourceVectorTileDefault.default({
          attributions: tilejson.getAttributions(),
          format: new _olFormatMVTDefault.default(),
          tileGrid: new _olTilegridTileGridDefault.default({
            origin: tileGrid.getOrigin(0),
            extent: extent || tileGrid.getExtent(),
            minZoom: minZoom,
            resolutions: _util.defaultResolutions.slice(0, maxZoom + 1),
            tileSize: 512
          }),
          urls: tiles
        });
        tilejson.set('ol-source', source);
      }
      _olObservable.unByKey(key);
      layer.setSource(source);
    } else if (state === 'error') {
      tilejson.set('ol-source', null);
      _olObservable.unByKey(key);
      layer.setSource(undefined);
    }
  });
  if (tilejson.getState() === 'ready') {
    tilejson.changed();
  }
  return layer;
}
function setupRasterLayer(glSource, url) {
  var layer = new _olLayerTileDefault.default();
  var source = new _olSourceTileJSONDefault.default({
    transition: 0,
    url: glSource.tiles ? undefined : url,
    tileJSON: glSource.tiles ? glSource : undefined,
    crossOrigin: 'anonymous'
  });
  var key = source.on('change', function () {
    var state = source.getState();
    if (state === 'ready') {
      _olObservable.unByKey(key);
      var tileJSONDoc = /** @type {Object}*/
      source.getTileJSON();
      var extent = extentFromTileJSON(tileJSONDoc);
      var tileGrid = source.getTileGrid();
      var tileSize = glSource.tileSize || tileJSONDoc.tileSize || 512;
      var minZoom = tileJSONDoc.minzoom || 0;
      var maxZoom = tileJSONDoc.maxzoom || 22;
      // Only works when using ES modules
      source.tileGrid = new _olTilegridTileGridDefault.default({
        origin: tileGrid.getOrigin(0),
        extent: extent || tileGrid.getExtent(),
        minZoom: minZoom,
        resolutions: _olTilegrid.createXYZ({
          maxZoom: maxZoom,
          tileSize: tileSize
        }).getResolutions(),
        tileSize: tileSize
      });
      layer.setSource(source);
    } else if (state === 'error') {
      _olObservable.unByKey(key);
      layer.setSource(undefined);
    }
  });
  source.setTileLoadFunction(function (tile, src) {
    if (src.indexOf('{bbox-epsg-3857}') != -1) {
      var bbox = source.getTileGrid().getTileCoordExtent(tile.getTileCoord());
      src = src.replace('{bbox-epsg-3857}', bbox.toString());
    }
    var img = /** @type {import("ol/ImageTile").default}*/
    tile.getImage();
    /** @type {HTMLImageElement}*/
    img.src = src;
  });
  return layer;
}
var geoJsonFormat = new _olFormatGeoJSONDefault.default();
function setupGeoJSONLayer(glSource, path) {
  var data = glSource.data;
  var features, geoJsonUrl;
  if (typeof data == 'string') {
    geoJsonUrl = withPath(data, path);
  } else {
    features = geoJsonFormat.readFeatures(data, {
      featureProjection: 'EPSG:3857'
    });
  }
  return new _olLayerVectorDefault.default({
    source: new _olSourceVectorDefault.default({
      attributions: glSource.attribution,
      features: features,
      format: geoJsonFormat,
      url: geoJsonUrl
    }),
    visible: false
  });
}
function updateRasterLayerProperties(glLayer, layer, view) {
  var zoom = view.getZoom();
  var opacity = _stylefunction.getValue(glLayer, 'paint', 'raster-opacity', zoom, emptyObj);
  layer.setOpacity(opacity);
}
function processStyle(glStyle, map, baseUrl, host, path, accessToken) {
  if (accessToken === void 0) {
    accessToken = '';
  }
  var promises = [];
  var view = map.getView();
  if (!view.isDef() && !view.getRotation() && !view.getResolutions()) {
    view = new _olViewDefault.default({
      maxResolution: _util.defaultResolutions[0]
    });
    map.setView(view);
  }
  if (('center' in glStyle) && !view.getCenter()) {
    view.setCenter(_olProj.fromLonLat(glStyle.center));
  }
  if (('zoom' in glStyle) && view.getZoom() === undefined) {
    view.setResolution(_util.defaultResolutions[0] / Math.pow(2, glStyle.zoom));
  }
  if (!view.getCenter() || view.getZoom() === undefined) {
    view.fit(view.getProjection().getExtent(), {
      nearest: true,
      size: map.getSize()
    });
  }
  if (glStyle.sprite) {
    if (glStyle.sprite.indexOf('mapbox://') == 0) {
      glStyle.sprite = baseUrl + '/sprite' + accessToken;
    } else if (glStyle.sprite.indexOf('http') != 0) {
      glStyle.sprite = (host ? host + path : '') + glStyle.sprite + accessToken;
    }
  }
  var glLayers = glStyle.layers;
  var layerIds = [];
  var glLayer, glSource, glSourceId, id, layer, url;
  var _loop_1 = function (i, ii) {
    glLayer = glLayers[i];
    var type = glLayer.type;
    if (type == 'heatmap' || type == 'hillshade') {} else if (type == 'background') {
      setBackground(map, glLayer);
    } else {
      id = glLayer.source || getSourceIdByRef(glLayers, glLayer.ref);
      // this technique assumes gl layers will be in a particular order
      if (id != glSourceId) {
        if (layerIds.length) {
          promises.push(finalizeLayer(layer, layerIds, glStyle, path, map));
          layerIds = [];
        }
        glSource = glStyle.sources[id];
        url = glSource.url;
        if (url) {
          url = withPath(url, path);
          if (url.indexOf('mapbox://') == 0) {
            var mapid_1 = url.replace('mapbox://', '');
            glSource.tiles = ['a', 'b', 'c', 'd'].map(function (host) {
              return 'https://' + host + '.tiles.mapbox.com/v4/' + mapid_1 + '/{z}/{x}/{y}.' + (glSource.type == 'vector' ? 'vector.pbf' : 'png') + accessToken;
            });
          } else if (url.indexOf('/') === 0 && host.indexOf('http') === 0) {
            url = host + url;
          }
        }
        if (glSource.type == 'vector') {
          layer = setupVectorLayer(glSource, accessToken, url);
        } else if (glSource.type == 'raster') {
          layer = setupRasterLayer(glSource, url);
          layer.setVisible(glLayer.layout ? glLayer.layout.visibility !== 'none' : true);
          view.on('change:resolution', updateRasterLayerProperties.bind(this_1, glLayer, layer, view));
          updateRasterLayerProperties(glLayer, layer, view);
        } else if (glSource.type == 'geojson') {
          layer = setupGeoJSONLayer(glSource, path);
        }
        glSourceId = id;
        if (layer) {
          layer.set('mapbox-source', glSourceId);
        }
      }
      layerIds.push(glLayer.id);
    }
  };
  var this_1 = this;
  for (var i = 0, ii = glLayers.length; i < ii; ++i) {
    _loop_1(i, ii);
  }
  promises.push(finalizeLayer(layer, layerIds, glStyle, path, map));
  map.set('mapbox-style', glStyle);
  return Promise.all(promises);
}
function olms(map, style) {
  var accessToken, baseUrl, host, path, promise;
  accessToken = baseUrl = host = path = '';
  if (typeof map === 'string' || map instanceof HTMLElement) {
    map = new _olMapDefault.default({
      target: map
    });
  }
  if (typeof style === 'string') {
    var parts = style.match(spriteRegEx);
    if (parts) {
      baseUrl = parts[1];
      accessToken = parts.length > 2 ? parts[2] : '';
    }
    promise = new Promise(function (resolve, reject) {
      fetch(style, {
        credentials: 'same-origin'
      }).then(function (response) {
        return response.json();
      }).then(function (glStyle) {
        var a = /** @type {HTMLAnchorElement}*/
        document.createElement('A');
        a.href = style;
        var href = a.href;
        path = a.pathname.split('/').slice(0, -1).join('/') + '/';
        host = href.substr(0, href.indexOf(path));
        processStyle(glStyle, map, baseUrl, host, path, accessToken).then(function () {
          resolve(map);
        }).catch(reject);
      }).catch(function (err) {
        reject(new Error("Could not load " + style + ": " + err.message));
      });
    });
  } else {
    promise = new Promise(function (resolve, reject) {
      processStyle(style, map).then(function () {
        resolve(map);
      }).catch(reject);
    });
  }
  return promise;
}
exports.default = olms;
function apply(map, style) {
  if (typeof map === 'string' || map instanceof HTMLElement) {
    map = new _olMapDefault.default({
      target: map
    });
  }
  setTimeout(function () {
    olms(map, style);
  }, 0);
  return map;
}
/**
* @private
* If layerIds is not empty, applies the style specified in glStyle to the layer,
* and adds the layer to the map.
*
* The layer may not yet have a source when the function is called.  If so, the style
* is applied to the layer via a once listener on the 'change:source' event.
*
* @param {Layer} layer An OpenLayers layer instance.
* @param {Array<string>} layerIds Array containing layer ids of already-processed layers.
* @param {Object} glStyle Style as a JSON object.
* @param {string|undefined} path The path part of the style URL. Only required
* when a relative path is used with the `"sprite"` property of the style.
* @param {PluggableMap} map OpenLayers Map.
* @return {Promise} Returns a promise that resolves after the source has
* been set on the specified layer, and the style has been applied.
*/
function finalizeLayer(layer, layerIds, glStyle, path, map) {
  var minZoom = 24;
  var maxZoom = 0;
  var glLayers = glStyle.layers;
  for (var i = 0, ii = glLayers.length; i < ii; ++i) {
    var glLayer = glLayers[i];
    if (layerIds.indexOf(glLayer.id) !== -1) {
      minZoom = Math.min(('minzoom' in glLayer) ? glLayer.minzoom : 0, minZoom);
      maxZoom = Math.max(('maxzoom' in glLayer) ? glLayer.maxzoom : 24, maxZoom);
    }
  }
  return new Promise(function (resolve, reject) {
    var setStyle = function () {
      var source = layer.getSource();
      if (!source || source.getState() === 'error') {
        reject(new Error('Error accessing data for source ' + layer.get('mapbox-source')));
        return;
      }
      if (typeof source.getTileGrid === 'function') {
        var tileGrid = source.getTileGrid();
        if (tileGrid) {
          var sourceMinZoom = tileGrid.getMinZoom();
          if (minZoom > 0 || sourceMinZoom > 0) {
            layer.setMaxResolution(Math.min(_util.defaultResolutions[minZoom], tileGrid.getResolution(sourceMinZoom)) + 1e-9);
          }
          if (maxZoom < 24) {
            layer.setMinResolution(_util.defaultResolutions[maxZoom] + 1e-9);
          }
        }
      }
      if (source instanceof _olSourceVectorDefault.default || source instanceof _olSourceVectorTileDefault.default) {
        applyStyle(/** @type {import("ol/layer/Vector").default|import("ol/layer/VectorTile").default}*/
        layer, glStyle, layerIds, path).then(function () {
          layer.setVisible(true);
          resolve();
        }, function (e) {
          reject(e);
        });
      } else {
        resolve();
      }
    };
    layer.set('mapbox-layers', layerIds);
    if (map.getLayers().getArray().indexOf(layer) === -1) {
      map.addLayer(layer);
    }
    if (layer.getSource()) {
      setStyle();
    } else {
      layer.once('change:source', setStyle);
    }
  });
}
function getLayer(map, layerId) {
  var layers = map.getLayers().getArray();
  for (var i = 0, ii = layers.length; i < ii; ++i) {
    var mapboxLayers = layers[i].get('mapbox-layers');
    if (mapboxLayers && mapboxLayers.indexOf(layerId) !== -1) {
      return (
        /** @type {Layer}*/
        layers[i]
      );
    }
  }
}
function getLayers(map, sourceId) {
  var result = [];
  var layers = map.getLayers().getArray();
  for (var i = 0, ii = layers.length; i < ii; ++i) {
    if (layers[i].get('mapbox-source') === sourceId) {
      result.push(/** @type {Layer}*/
      layers[i]);
    }
  }
  return result;
}
function getSource(map, sourceId) {
  var layers = map.getLayers().getArray();
  for (var i = 0, ii = layers.length; i < ii; ++i) {
    var source = /** @type {Layer}*/
    layers[i].getSource();
    if (layers[i].get('mapbox-source') === sourceId) {
      return source;
    }
  }
}
